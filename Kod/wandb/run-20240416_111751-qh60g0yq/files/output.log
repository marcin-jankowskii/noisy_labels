GPU dostÄ™pne: NVIDIA GeForce RTX 3090
/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Dataset/SegSperm/test
(119, 512, 512)
Mean IoU oneclass (intersection): 0.5423413202212185
IoU per class oneclass (intersection): [0.99533985 0.54234132]
Mean IoU multiclass (intersection): 0.5433811844072639
IoU per class multiclass (intersection): [0.99413973 0.34048681 0.74627556]
Mean IoU oneclass (annotator1): 0.6161045596133524
IoU per class oneclass (annotator1): [0.99531617 0.61610456]
Mean IoU multiclass (annotator1): 0.6282316364944796
IoU per class multiclass (annotator1): [0.99488753 0.49776679 0.75869648]
Mean IoU oneclass (annotator2): 0.5404680478635427
IoU per class oneclass (annotator2): [0.99467808 0.54046805]
Mean IoU multiclass (annotator2): 0.5743527731612461
IoU per class multiclass (annotator2): [0.99405753 0.38860108 0.76010446]
Mean IoU oneclass (union): 0.608146927006163
IoU per class oneclass (union): [0.99465233 0.60814693]
Mean IoU multiclass (union): 0.6467037718822146
IoU per class multiclass (union): [0.99463351 0.52221076 0.77119678]
Mean IoU oneclass (feeling lucky): 0.577764464503026
IoU per class oneclass (feeling lucky): [0.99498802 0.57776446]
Mean IoU multiclass (feeling lucky): 0.5998372787495128
IoU per class multiclass (feeling lucky): [0.99442966 0.44089952 0.75877504]
Traceback (most recent call last):
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/inference.py", line 552, in <module>
    predict(model, test_loader)
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/inference.py", line 469, in predict
    calculate_optimal_threshold(true_masks,soft1.cpu(), soft2.cpu())
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/inference.py", line 282, in calculate_optimal_threshold
    plt.plot(thresholds.numpy(), iou_scores_multiclass, label='IoU vs Threshold')
  File "/home/cal314-1/miniconda3/envs/marcinv2/lib/python3.11/site-packages/matplotlib/pyplot.py", line 3575, in plot
    return gca().plot(
           ^^^^^^^^^^^
  File "/home/cal314-1/miniconda3/envs/marcinv2/lib/python3.11/site-packages/matplotlib/axes/_axes.py", line 1721, in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/cal314-1/miniconda3/envs/marcinv2/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 303, in __call__
    yield from self._plot_args(
               ^^^^^^^^^^^^^^^^
  File "/home/cal314-1/miniconda3/envs/marcinv2/lib/python3.11/site-packages/matplotlib/axes/_base.py", line 489, in _plot_args
    y = _check_1d(xy[1])
        ^^^^^^^^^^^^^^^^
  File "/home/cal314-1/miniconda3/envs/marcinv2/lib/python3.11/site-packages/matplotlib/cbook.py", line 1358, in _check_1d
    return np.atleast_1d(x)
           ^^^^^^^^^^^^^^^^
  File "/home/cal314-1/miniconda3/envs/marcinv2/lib/python3.11/site-packages/numpy/core/shape_base.py", line 65, in atleast_1d
    ary = asanyarray(ary)
          ^^^^^^^^^^^^^^^
ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 2 dimensions. The detected shape was (100, 2) + inhomogeneous part.