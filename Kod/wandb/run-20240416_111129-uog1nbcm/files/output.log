GPU dostÄ™pne: NVIDIA GeForce RTX 3090
/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Dataset/SegSperm/test
(119, 512, 512)
Mean IoU oneclass (intersection): 0.5423413202212185
IoU per class oneclass (intersection): [0.99533985 0.54234132]
Mean IoU multiclass (intersection): 0.5433811844072639
IoU per class multiclass (intersection): [0.99413973 0.34048681 0.74627556]
Mean IoU oneclass (annotator1): 0.6161045596133524
IoU per class oneclass (annotator1): [0.99531617 0.61610456]
Mean IoU multiclass (annotator1): 0.6282316364944796
IoU per class multiclass (annotator1): [0.99488753 0.49776679 0.75869648]
Mean IoU oneclass (annotator2): 0.5404680478635427
IoU per class oneclass (annotator2): [0.99467808 0.54046805]
Mean IoU multiclass (annotator2): 0.5743527731612461
IoU per class multiclass (annotator2): [0.99405753 0.38860108 0.76010446]
Mean IoU oneclass (union): 0.608146927006163
IoU per class oneclass (union): [0.99465233 0.60814693]
Mean IoU multiclass (union): 0.6467037718822146
IoU per class multiclass (union): [0.99463351 0.52221076 0.77119678]
Traceback (most recent call last):
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/inference.py", line 552, in <module>
    predict(model, test_loader)
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/inference.py", line 469, in predict
    calculate_optimal_threshold(true_masks,soft1, soft2)
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/inference.py", line 266, in calculate_optimal_threshold
    iou_multiclass = calculate_iou(pred_masks_multiclass, ids1,3)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/utils/metrics2.py", line 23, in calculate_iou
    layer_iou_scores = compute_iou_per_class(mask1[i], mask2[i], num_classes)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/media/cal314-1/9E044F59044F3415/Marcin/noisy_labels/Kod/utils/metrics2.py", line 9, in compute_iou_per_class
    intersection = np.logical_and(mask1_cls, mask2_cls).sum()
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/cal314-1/miniconda3/envs/marcinv2/lib/python3.11/site-packages/torch/_tensor.py", line 1062, in __array__
    return self.numpy()
           ^^^^^^^^^^^^
TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.
Mean IoU oneclass (feeling lucky): 0.5775731382793001
IoU per class oneclass (feeling lucky): [0.99498871 0.57757314]
Mean IoU multiclass (feeling lucky): 0.5997498217895463
IoU per class multiclass (feeling lucky): [0.99443541 0.44058682 0.75891283]